using MultiPlug.Base.Diagnostics;

namespace MultiPlug.Ext.RasPi.Config.Diagnostics
{
    internal class EventLogDefinitions
    {
        internal const string DefinitionsId = "MultiPlug.Ext.RasPi.Config.EN";

        internal static EventLogDefinition[] Definitions { get; set; } = new EventLogDefinition[]
        {
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceHome,               Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Home", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceUser,               Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "User", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceActions,            Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Acions", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceBoot,               Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Boot", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceHAT,                Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "HAT", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceInterfacing,        Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Interfacing", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceLocalisation,       Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Localisation", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceMemory,             Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Memory", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceNetwork,            Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Network", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SourceDebug,              Source = (uint) EventLogEntryCodes.Reserved, StringFormat = "Debug", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SystemShutdown,           Source = (uint) EventLogEntryCodes.SourceUser, StringFormat = "System restart triggered",                               Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HostNameChanging,         Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting Hostname to {0}",                            Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HostNameChanged,          Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "New Hostname applied",                               Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HostNameChangeError,      Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Unable to set Hostname. Exception Message: {0}",     Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSIDChanging,             Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting WiFi SSID to {0} and setting Passphrase",    Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSIDChanged,              Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "New SSID and Passphrase applied",                    Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSIDChangeError,          Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Unable to set SSID/Passphrase. Exception Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICIP4StaticChanging,     Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting NIC {0} to static IPv4 Address of {1}",      Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICIP4DynamicChanging,    Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting NIC {0} to use a dynamic IPv4 Address",      Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICIP6StaticChanging,     Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting NIC {0} to static IPv6 Address of {1}",      Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICIP6DynamicChanging,    Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting NIC {0} to use a dynamic IPv6 Address",      Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICRoutersChanging,       Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting NIC {0} Routers to {1}",                     Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICDNSChanging,           Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Setting NIC {0} DNS list to {1}",                    Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICIPChangesComplete,     Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "New Settings to IP Addresses applied",               Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICIPChangesError,        Source = (uint) EventLogEntryCodes.SourceNetwork,  StringFormat = "Unable to apply new settings to IP Addresses. Exception Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdEnabling,        Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Enabling Timesyncd", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdEnablingError,   Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Enabling Timesyncd. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdEnabled,         Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Timesyncd Enabled", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdStarting,        Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Starting Timesyncd", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdStartingError,   Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Starting Timesyncd. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdStarted,         Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Timesyncd Started", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdStopping,        Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Stopping Timesyncd", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdStoppingError,   Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Stopping Timesyncd. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdStopped,         Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Timesyncd Stopped", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdDisabling,       Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Disabling Timesyncd", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdDisablingError,  Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Disabling Timesyncd. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimesyncdDisabled,        Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Timesyncd Disabled", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockEnabling,      Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Enabling Fake Hardware Clock", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockEnablingError, Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Enabling Fake Hardware Clock. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockEnabled,       Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Fake Hardware Clock Enabled", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockStarting,      Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Starting Fake Hardware Clock", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockStartingError, Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Starting Fake Hardware Clock. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockStarted,       Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Fake Hardware Clock Started", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockStopping,      Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Stopping Fake Hardware Clock", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockStoppingError, Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Stopping Fake Hardware Clock. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockStopped,       Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Fake Hardware Clock Stopped", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockDisabling,     Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Disabling Fake Hardware Clock", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockDisablingError,Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error Disabling Fake Hardware Clock. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHwClockDisabled,      Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Fake Hardware Clock Disabled", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeZoneSetting,          Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Attempting to set the Time Zone to {0}", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeZoneSettingError,     Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Time Zone setting Error. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeZoneSet,              Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Time Zone set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.WifiCountrySetting,       Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Attempting to set the WiFi Country to {0}", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.WifiCountrySettingError,  Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "WiFi Country setting Error. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.WifiCountrySet,           Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "WiFi Country set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DateSetting,              Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Attempting to set the Date using the command: {0}", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DateSettingError,         Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Date setting Error. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DateSet,                  Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Date set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeSetting,              Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Attempting to set the Time using the command: {0}", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeSettingError,         Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Time setting Error. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeSet,                  Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Time set successfully", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NetworkWaitSettingTrue,   Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting to wait for the Network", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NetworkWaitSettingFalse,  Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting to NOT wait for the Network", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NetworkWaitSettingError,  Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting Network Wait option Error. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NetworkWaitSet,           Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Network Wait set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SplashScreenSettingTrue,  Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Enabling the Splash Screen during boot", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SplashScreenSettingFalse, Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Disabling the Splash Screen during boot", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SplashScreenSettingError, Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Error setting the Splash Screen option. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SplashScreenSet,          Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Splash Screen option set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootBehaviourSettingConsole, Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting boot to Console", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootBehaviourSettingConsoleAutologin, Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting boot to Console with Auto Login", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootBehaviourSettingDesktop, Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting boot to Desktop", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootBehaviourSettingDesktopAutologin, Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting boot to Desktop with Auto Login", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootBehaviourSettingError,Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Error setting the Boot-To option. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootBehaviourSet,         Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Boot-To option set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootOrderSettingUSB,      Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting Boot Order to USB", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootOrderSettingNetwork,  Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting Boot Order to Network", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootOrderSettingError,    Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Error setting the Boot Order. Message {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootOrderSet,             Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Boot Order set successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootROMSettingLatest,     Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting to Boot from Latest ROM", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootROMSettingDefault,    Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Setting to Boot from Default ROM", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootROMSettingError,      Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Error Setting which ROM to boot from. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.BootROMSet,               Source = (uint) EventLogEntryCodes.SourceBoot, StringFormat = "Which ROM to boot from set successfully", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CameraSettingEnabling,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling the Camera Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CameraSettingDisabling,   Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling the Camera Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CameraSettingError,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the Camera Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CameraSettingEnabled,     Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled the Camera Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CameraSettingDisabled,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled the Camera Interface successfully", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSHSettingEnabling,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling SSH", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSHSettingDisabling,      Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling SSH ", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSHSettingError,          Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the setting to SSH. Message: {0", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSHSettingEnabled,        Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled SSH successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSHSettingDisabled,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled SSH successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.VNCSettingEnabling,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling VNC", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.VNCSettingDisabling,      Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling VNC", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.VNCSettingError,          Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the setting to VNC. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.VNCSettingEnabled,        Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled VNC successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.VNCSettingDisabled,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled VNC successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SPISettingEnabling,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling the SPI Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SPISettingDisabling,      Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling the SPI Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SPISettingError,          Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the SPI Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SPISettingEnabled,        Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled the SPI Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SPISettingDisabled,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled the SPI Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.I2CSettingEnabling,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling the I2C Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.I2CSettingDisabling,      Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling the I2C Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.I2CSettingError,          Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the I2C Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.I2CSettingEnabled,        Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled the I2C Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.I2CSettingDisabled,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled the I2C Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SerialSettingEnabling,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling the Serial Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SerialSettingDisabling,   Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling the Serial Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SerialSettingError,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the Serial Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SerialSettingEnabled,     Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled the Serial Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SerialSettingDisabled,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled the Serial Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.OneWireSettingEnabling,   Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling the 1-Wire Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.OneWireSettingDisabling,  Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling the 1-Wire Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.OneWireSettingError,      Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the 1-Wire Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.OneWireSettingEnabled,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled the 1-Wire Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.OneWireSettingDisabled,   Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled the 1-Wire Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RemoteGPIOSettingEnabling,Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabling the Remote GPIO Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RemoteGPIOSettingDisabling,Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabling the Remote GPIO Interface", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RemoteGPIOSettingError,   Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error changing the Remote GPIO Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RemoteGPIOSettingEnabled, Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Enabled the Remote GPIO Interface successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RemoteGPIOSettingDisabled,Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Disabled the Remote GPIO Interface successfully", Type = EventLogEntryType.Information  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CameraSettingGetError,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the Camera Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSHSettingGetError,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the SSH. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.VNCSettingGetError,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the VNC. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SPISettingGetError,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the SPI Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.I2CSettingGetError,       Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the I2C Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SerialSettingGetError,    Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the Serial Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.OneWireSettingGetError,   Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the 1-Wire Interface. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RemoteGPIOSettingGetError,Source = (uint) EventLogEntryCodes.SourceInterfacing, StringFormat = "Error while getting the current state of the Remote GPIO Interface. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HATSettingsGetProductError,           Source = (uint) EventLogEntryCodes.SourceHAT,   StringFormat = "Error while getting the current value of the HAT Product description. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HATSettingsGetProductIdError,         Source = (uint) EventLogEntryCodes.SourceHAT,   StringFormat = "Error while getting the current value of the HAT Product ID. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HATSettingsGetProductVersionError,    Source = (uint) EventLogEntryCodes.SourceHAT,   StringFormat = "Error while getting the current value of the HAT Product Version. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HATSettingsGetUUIDError,              Source = (uint) EventLogEntryCodes.SourceHAT,   StringFormat = "Error while getting the current value of the HAT UUID. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HATSettingsGetVendorError,            Source = (uint) EventLogEntryCodes.SourceHAT,   StringFormat = "Error while getting the current value of the HAT Vendor. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NetworkWaitSettingsGetError,  Source = (uint) EventLogEntryCodes.SourceBoot,          StringFormat = "Error while getting the current Network-Wait Setting. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SplashScreenSettingsGetError, Source = (uint) EventLogEntryCodes.SourceBoot,          StringFormat = "Error while getting the current Splash Screen Setting. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.HostNameSettingsGetError,     Source = (uint) EventLogEntryCodes.SourceNetwork,       StringFormat = "Error while getting the current HostName. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.SSIDSettingsGetError,         Source = (uint) EventLogEntryCodes.SourceNetwork,       StringFormat = "Error while getting the current SSID. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.NICInterfacesGetError,        Source = (uint) EventLogEntryCodes.SourceNetwork,       StringFormat = "Error while getting the current NIC Interfaces. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RaspberryPiModelSettingGetError,Source = (uint) EventLogEntryCodes.SourceHome,        StringFormat = "Error while getting the Raspberry Pi Model. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DebianVersionSettingGetError, Source = (uint) EventLogEntryCodes.SourceHome,          StringFormat = "Error while getting the Debian Version. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DateTimeSettingGetError,      Source = (uint) EventLogEntryCodes.SourceHome,          StringFormat = "Error while getting the Date and Time. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.GPUTemperatureSettingGetError,Source = (uint) EventLogEntryCodes.SourceHome,          StringFormat = "Error while getting the GPU Temperature. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.CPUTemperatureSettingGetError,Source = (uint) EventLogEntryCodes.SourceHome,          StringFormat = "Error while getting the CPU Temperature. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.WiFiCountriesSettingGetError, Source = (uint) EventLogEntryCodes.SourceLocalisation,  StringFormat = "Error while getting the possible WiFi Countries. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.WiFiCountrySettingGetError,   Source = (uint) EventLogEntryCodes.SourceLocalisation,  StringFormat = "Error while getting the current WiFi Country. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeZonesSettingGetError,     Source = (uint) EventLogEntryCodes.SourceLocalisation,  StringFormat = "Error while getting the possible Time Zones. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeZoneSettingGetError,      Source = (uint) EventLogEntryCodes.SourceLocalisation,  StringFormat = "Error while getting the current Time Zone. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DateSettingGetError,          Source = (uint) EventLogEntryCodes.SourceLocalisation,  StringFormat = "Error while getting the current Date. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeSettingGetError,          Source = (uint) EventLogEntryCodes.SourceLocalisation,  StringFormat = "Error while getting the current Time. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.TimeSyncdEnabledSettingGetError,Source = (uint) EventLogEntryCodes.SourceLocalisation,StringFormat = "Error while getting the current state of TimeSyncd. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.FakeHWClockEnabledSettingGetError,Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Error while getting the current state if the Fake Hardware Clock. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DiskFreeSettingGetError,      Source = (uint) EventLogEntryCodes.SourceMemory,        StringFormat = "Error while getting the current Disk usage. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RAMFreeSettingGetError,       Source = (uint) EventLogEntryCodes.SourceMemory,        StringFormat = "Error while getting the current RAM usage. Message: {0}", Type = EventLogEntryType.Error  },

            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RTCSyncing,                   Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "Attempting to sync the Hardware Clock", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RTCSyncError,                 Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "RTC Sync Error. Message: {0}", Type = EventLogEntryType.Error  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.RTCSynced,                    Source = (uint) EventLogEntryCodes.SourceLocalisation, StringFormat = "RTC Synced successfully", Type = EventLogEntryType.Information  },
            new EventLogDefinition { Code = (uint) EventLogEntryCodes.DebugWriteLine,               Source = (uint) EventLogEntryCodes.SourceDebug, StringFormat = "{0}", Type = EventLogEntryType.Information  }
        };
    }
}
